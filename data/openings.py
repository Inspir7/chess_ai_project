import sqlite3
import chess
import chess.pgn
import pandas as pd
import time
import io

# –ü—ä—Ç–∏—â–∞ –¥–æ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ
openings_csv_path = r"C:\Users\prezi\PycharmProjects\chess_ai_project\data\chess_openings.csv"
db_path = r"C:\Users\prezi\PycharmProjects\chess_ai_project\data\datachess_games.db"
invalid_games_path = r"C:\Users\prezi\PycharmProjects\chess_ai_project\data\invalid_games.txt"

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–µ–±—é—Ç–∏—Ç–µ
openings_df = pd.read_csv(openings_csv_path)


def san_to_uci(san_moves):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ SAN —Ö–æ–¥–æ–≤–µ (–∫–∞—Ç–æ 'e4 e5 Nf3 Nc6') –≤ UCI (–∫–∞—Ç–æ 'e2e4 e7e5 g1f3 b8c6')."""
    board = chess.Board()
    uci_moves = []

    for san in san_moves.split():
        try:
            move = board.parse_san(san)
            uci_moves.append(move.uci())
            board.push(move)
        except ValueError:
            return "Invalid"  # –ê–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞, –º–∞—Ä–∫–∏—Ä–∞–º–µ —Ö–æ–¥–∞ –∫–∞—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω

    return " ".join(uci_moves)


# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –¥–µ–±—é—Ç–∏—Ç–µ –≤ UCI (–∞–∫–æ –≤—Å–µ –æ—â–µ –Ω–µ —Å–∞)
if 'uci_moves' not in openings_df.columns:
    openings_df['uci_moves'] = openings_df['moves'].apply(san_to_uci)


def get_opening_from_moves(moves_uci):
    """–û–ø–∏—Ç–≤–∞ —Å–µ –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–µ –¥–µ–±—é—Ç–∞ –Ω–∞ –±–∞–∑–∞—Ç–∞ –Ω–∞ –ø—ä—Ä–≤–∏—Ç–µ —Ö–æ–¥–æ–≤–µ."""
    if moves_uci == "Invalid":
        return "Invalid", "Invalid"

    board = chess.Board()
    moves = moves_uci.split()

    for move in moves:
        try:
            board.push_uci(move)
        except ValueError:
            with open(invalid_games_path, "a") as f:
                f.write(moves_uci + "\n")
            return "Invalid", "Invalid"

    for _, row in openings_df.iterrows():
        opening_moves = row['uci_moves'].split()
        if moves[:len(opening_moves)] == opening_moves:
            return row['ECO'], row['name']

    return "Unknown", "Unknown"


def update_missing_openings():
    """–û–±–Ω–æ–≤—è–≤–∞ –¥–µ–±—é—Ç–∏—Ç–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –ø—Ä–æ–º—è–Ω–∞—Ç–∞ –µ —Ä–µ–∞–ª–Ω–∞."""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM games WHERE eco = 'Unknown' OR opening = 'Unknown'")
    games_before = cursor.fetchone()[0]
    print(f"üìä –ü—Ä–µ–¥–∏ —Å—Ç–∞—Ä—Ç–∞: {games_before} –ø–∞—Ä—Ç–∏–∏ –±–µ–∑ –¥–µ–±—é—Ç")

    cursor.execute("SELECT id, moves_uci FROM games WHERE eco = 'Unknown' OR opening = 'Unknown'")
    games = cursor.fetchall()

    print(f"üîç –û—Ç–∫—Ä–∏—Ç–∏ {len(games)} –ø–∞—Ä—Ç–∏–∏ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞.")

    start_time = time.time()
    updated_games = []
    batch_size = 1000
    optimize_every = 10000
    invalid_count = 0
    updated_count = 0

    for index, (game_id, moves_uci) in enumerate(games, start=1):
        eco, opening = get_opening_from_moves(moves_uci)

        if eco == "Invalid":
            invalid_count += 1
            continue

        updated_games.append((eco, opening, game_id))

        if len(updated_games) >= batch_size:
            cursor.executemany("UPDATE games SET eco = ?, opening = ? WHERE id = ?", updated_games)
            conn.commit()
            updated_count += len(updated_games)
            print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∏ {updated_count} –æ–±–Ω–æ–≤–µ–Ω–∏ –ø–∞—Ä—Ç–∏–∏!")
            updated_games.clear()

        if index % optimize_every == 0:
            conn.execute("PRAGMA wal_checkpoint(FULL);")
            conn.execute("VACUUM;")
            conn.commit()
            print("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –∏–∑–≤—ä—Ä—à–µ–Ω–∞!")

    if updated_games:
        cursor.executemany("UPDATE games SET eco = ?, opening = ? WHERE id = ?", updated_games)
        conn.commit()
        updated_count += len(updated_games)
        print(f"‚úÖ –§–∏–Ω–∞–ª–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∏ {updated_count} –ø–∞—Ä—Ç–∏–∏!")

    cursor.execute("SELECT COUNT(*) FROM games WHERE eco = 'Unknown' OR opening = 'Unknown'")
    games_after = cursor.fetchone()[0]
    print(f"üìä –°–ª–µ–¥ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ: {games_after} –ø–∞—Ä—Ç–∏–∏ –±–µ–∑ –¥–µ–±—é—Ç (—Ä–∞–∑–ª–∏–∫–∞: {games_before - games_after})")

    conn.close()
    elapsed_time = time.time() - start_time
    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—ä—Ç –∑–∞–≤—ä—Ä—à–∏ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥–∏!")
    print(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∏ –∏–≥—Ä–∏: {invalid_count} (–∑–∞–ø–∏—Å–∞–Ω–∏ –≤ {invalid_games_path})")


if __name__ == "__main__":
    update_missing_openings()
